excluded_list = ['test_pytorch_with_attestation_no_encryption_key']

def get_testname(run){
    def add_excluded_tests = "not " + excluded_list.join(" and not ")
    result = "";
    switch(run) {
        case 'all_test': 
            break;
        case 'all_non_attestation_test': 
            result = 'non_attestation';
            break;
        case 'all_attestation_test': 
            result = 'attestation';
            break;
        case 'redis_attestation_test': 
            result = 'redis_attestation';
            break;
        case 'pytorch_attestation_test': 
            result = 'pytorch_attestation';
            break;
        case 'redis_non_attestation_test': 
            result = 'redis_non_attestation';
            break;
        case 'pytorch_non_attestation_test': 
            result = 'pytorch_non_attestation';
            break;
        case 'bash_non_attestation_test':
            result = 'bash_non_attestation';
            break;
        case 'bash_attestation_test':
            result = 'bash_attestation';
            break;
    }
    return result;
}

def initialize(){
    if(!run_specific_test?.trim()){
        test_cmd = " -m "
        tests_to_execute = get_testname(run)
        run_stage_name = run
    } else {
        test_cmd = " "
        run_stage_name = run_specific_test
        tests_to_execute = sh(returnStdout:true, script:"python3 ci/libs/get_test_details.py $run_specific_test  2>&1").trim()
    }
}

def runtest(){
    stage("Run : $run_stage_name"){
        print("test command : $test_cmd '$tests_to_execute'")
        sh """
            # sudo python3 -m pytest -v -s -k '$tests_to_execute' --junit-xml libos-regression.xml
            # curses doesnt recognise Jenkins terminal. Hence ssh to local machine with pseudo-terminal allocation
            # ssh -tt intel@localhost "cd $WORKSPACE; $test_cmd '$tests_to_execute'"
            # cd $WORKSPACE
            # sudo python3 -m pytest -v -s $test_cmd $tests_to_execute
            ssh -tt intel@localhost "cd $WORKSPACE; sudo python3 -m pytest -v -s $test_cmd '$tests_to_execute'"
        """
    }
}

def storeartifacts(){
    stage("Archive artifacts"){
        dir('logs') {
            archiveArtifacts artifacts: '**'
        }
    }
}

def cleanup(){
    stage("cleanup $nodeLabel"){
        sh "sudo rm -rf $WORKSPACE/*"
    }
}

return this